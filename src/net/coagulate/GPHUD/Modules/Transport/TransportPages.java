package net.coagulate.GPHUD.Modules.Transport;

import net.coagulate.Core.HTML.Elements.Raw;
import net.coagulate.Core.HTML.Page;
import net.coagulate.Core.Tools.UnixTime;
import net.coagulate.GPHUD.Interfaces.Inputs.Button;
import net.coagulate.GPHUD.Interfaces.Inputs.CheckBox;
import net.coagulate.GPHUD.Interfaces.Outputs.Link;
import net.coagulate.GPHUD.Interfaces.Outputs.Paragraph;
import net.coagulate.GPHUD.Interfaces.Outputs.TextHeader;
import net.coagulate.GPHUD.Interfaces.Outputs.TextSubHeader;
import net.coagulate.GPHUD.Interfaces.User.Form;
import net.coagulate.GPHUD.Modules.SideSubMenu;
import net.coagulate.GPHUD.Modules.URL;
import net.coagulate.GPHUD.SafeMap;
import net.coagulate.GPHUD.State;
import net.coagulate.SL.HTTPPipelines.PlainTextMapper;
import org.apache.http.entity.ContentType;
import org.json.JSONException;
import org.json.JSONObject;

import javax.annotation.Nonnull;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransportPages {
	@URL.URLs(url="/transport")
	public static void transportPage(@Nonnull final State st,final SafeMap values) {
		final Form f=st.form();
		f.add(new TextHeader("Transport Module"));
		f.add(new Paragraph(
				"The transport module provides a mechanism for importing or exporting data.  This can be used to copy CONFIGURATION data between instances or even different GPHUD servers."));
		f.add(new Paragraph("Note that currently the transport of character data is not supported"));
		f.p(new Link("Import Settings","transport/import"));
		f.p(new Link("Export Settings","transport/export"));
	}
	
	@SideSubMenu.SideSubMenus(name="Import", priority=1, requiresPermission="transport.*")
	@URL.URLs(url="/transport/import")
	public static void importPage(@Nonnull final State st,final SafeMap values) throws IOException {
		final Form f=st.form();
		f.noForm();
		f.add("<form method=\"POST\" enctype=\"multipart/form-data\">");
		f.add(new TextHeader("Transport Module, Import"));
		f.add(new Paragraph("This page can be used to Import saved settings."));
		f.p("Please note the import is MERGED into your current system ; new items are created, items with the same name will be overwritten, items not present in the import will not be deleted.");
		f.p("It is <b>STRONGLY</b> recommended you run the import in preview mode first and review any errors/warnings");
		f.add(new CheckBox("Simulation","true"));
		f.add("Simulate Import");
		f.br();
		f.add("<input type=\"file\" id=\"importFile\" name=\"import.json\">");
		f.add(new Button("Begin Import","Begin Import"));
		//System.out.println("Begin import presence: "+values.containsKey("Begin Import"));
		//System.out.println("Import.json presence: "+values.containsKey("import.json"));
		if (values.containsKey("Begin Import")&&values.containsKey("import.json")) {
			try {
				final JSONObject json=new JSONObject(values.get("import.json"));
				final ImportReport report=doImport(st,json,values.containsKey("Simulation"));
				f.add(new TextSubHeader("Import Errors"));
				for (final String s: report.errors()) {
					f.add(s).br();
				}
				f.add(new TextSubHeader("Import Warnings"));
				for (final String s: report.warnings()) {
					f.add(s).br();
				}
				f.add(new TextSubHeader("Import Information"));
				for (final String s: report.informational()) {
					f.add(s).br();
				}
				f.add(new TextSubHeader("Import No-operations"));
				for (final String s: report.noops()) {
					f.add(s).br();
				}
			} catch (final JSONException e) {
				st.logger().warning("Unable to parse JSON input "+values.get("import.json"));
			}
		}
		f.add("</form>");
	}
	
	private static ImportReport doImport(@Nonnull final State state,
	                                     @Nonnull final JSONObject json,
	                                     final boolean simulation) {
		final ImportReport report=new ImportReport();
		if (!"GPHUD Export".equals(json.optString("identifier","NO IDENTIFIER FOUND"))) {
			report.error("No valid identifier found");
			return report;
		}
		if (json.optInt("version",-1)<1) {
			report.error("Invalid version "+json.optInt("version",-1));
			return report;
		}
		if (json.optInt("version",-1)>1) {
			report.error("Invalid version (too high) "+json.optInt("version",-1));
			return report;
		}
		if (json.has("exportedBy")) {
			report.info("Export generated by "+json.getString("exportedBy"));
		}
		if (json.has("exportedByKey")) {
			report.info("Export generated by "+json.getString("exportedByKey"));
		}
		if (json.has("exportedWhen")) {
			report.info("Exported at "+json.getString("exportedWhen"));
		}
		
		for (final Transporter transport: TransportModule.transports) {
			if (state.hasPermission("Transport.Import"+transport.transportName())) {
				if (json.has(transport.transportName())) {
					report.info("Processing transport block "+transport.transportName());
					transport.importElements(state,report,json.getJSONObject(transport.transportName()),simulation);
				}
			}
		}
		return report;
	}
	
	@SideSubMenu.SideSubMenus(name="Export", priority=2, requiresPermission="transport.*")
	@URL.URLs(url="/transport/export")
	public static void exportPage(@Nonnull final State st,final SafeMap values) {
		final Form f=st.form();
		f.add(new TextHeader("Transport Module, Export"));
		f.p("Here you may download specific items or whole sections of your configuration which can then be imported later.");
		f.add(new TextSubHeader("Select data to export"));
		// yes the duplication is sorta shameful :)
		f.p("""
				    <button type="button"
				    	onClick="document.getElementById('exports').childNodes
				    	.forEach(x=>{
				    		if (x.nodeName=='DIV') {
				    			document.getElementById(x.id).childNodes.forEach(y=>{if (y.nodeName=='INPUT') {  y.checked=true; } } );
				    		}
				    	})" >Select ALL</button>
				    """+"""
				    <button type="button"
				    	onClick="document.getElementById('exports').childNodes
				    	.forEach(x=>{
				    		if (x.nodeName=='DIV') {
				    			document.getElementById(x.id).childNodes.forEach(y=>{if (y.nodeName=='INPUT') {  y.checked=false; } } );
				    		}
				    	})" >DeSelect ALL</button>
				    """);
		f.add("<table border=0 margin=0>");
		f.add("<div id=exports>");
		final Map<String,List<String>> pendingExports=new HashMap<>();
		for (final Transporter t: TransportModule.transports) {
			if (st.hasPermission("Transport.Export"+t.transportName())) {
				f.add("<tr><th align=left>"+t.transportName()+"</th><td>");
				f.add(t.description()+"</td><td align=left>");
				f.add("<button type=\"button\" onClick=\""+t.transportName()+".hidden=!"+t.transportName()+
				      ".hidden;\">Expand</button>");
				f.add("<button type=\"button\" onClick=\"document.getElementById('"+t.transportName()+
				      "').childNodes.forEach(x=>{ if (x.nodeName=='INPUT') { x.checked=true; } } )\">Select All</button>");
				f.add("<button type=\"button\" onClick=\"document.getElementById('"+t.transportName()+
				      "').childNodes.forEach(x=>{ if (x.nodeName=='INPUT') { x.checked=false; } } )\">DeSelect All</button>");
				f.add("</td></tr><tr><td colspan=3>");
				f.add("<div hidden id=\""+t.transportName()+"\">");
				for (@Nonnull final String element: t.getExportableElements(st)) {
					final String key=t.transportName()+"."+element;
					f.add("<input type=\"checkbox\"  name=\""+key+"\" id=\""+key+"\" value=1 "+
					      (values.containsKey(key)?"checked":"")+"> "+element+"<br>");
					if (values.containsKey(key)) {
						if (!pendingExports.containsKey(t.transportName())) {
							pendingExports.put(t.transportName(),new ArrayList<>());
						}
						pendingExports.get(t.transportName()).add(element);
					}
				}
				f.add("</div>");
				f.add("</td></tr>");
			}
		}
		f.add("</div>");
		f.add("</table>");
		f.p("");
		f.add(new Button("Download"));
		if (values.containsKey("Download")) {
			Page.page().resetRoot();
			st.suppressOutput(true);
			Page.page().template(new PlainTextMapper.PlainTextTemplate());
			Page.page()
			    .addHeader("content-disposition",
			               "attachment; filename=\""+st.getInstance().getName()+" - "+
			               UnixTime.fromUnixTime(st.getInstance().lastReport(),st.getAvatar().getTimeZone())+" "+
			               st.getAvatar().getTimeZone()+".json\"");
			Page.page().contentType(ContentType.create("text/json"));
			final JSONObject payload=new JSONObject();
			payload.put("identifier","GPHUD Export");
			payload.put("exportedBy",st.getAvatar().getName());
			payload.put("exportedByKey",st.getAvatar().getUUID());
			payload.put("exportedWhen",UnixTime.fromUnixTime(UnixTime.getUnixTime(),"UTC"));
			payload.put("version",1);
			for (final Transporter t: TransportModule.transports) {
				if (st.hasPermission("Transport.Export"+t.transportName())) {
					if (pendingExports.containsKey(t.transportName())) {
						payload.put(t.transportName(),t.exportElements(st,pendingExports.get(t.transportName())));
					}
				}
			}
			final Writer w=new StringWriter();
			payload.write(w,4,0);
			//noinspection deprecation
			Page.page().add(new Raw(w.toString()));
		}
	}
	
}
