/* Generated By:JJTree&JavaCC: Do not edit this line. GSParserConstants.java */
package net.coagulate.GPHUD.Modules.Scripting.Language.Generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GSParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 11;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 12;
  /** RegularExpression Id. */
  int HEX_LITERAL = 13;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 14;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 15;
  /** RegularExpression Id. */
  int EXPONENT = 16;
  /** RegularExpression Id. */
  int STRING_LITERAL = 17;
  /** RegularExpression Id. */
  int RETURN = 18;
  /** RegularExpression Id. */
  int WHILE = 19;
  /** RegularExpression Id. */
  int FLOAT = 20;
  /** RegularExpression Id. */
  int ELSE = 21;
  /** RegularExpression Id. */
  int FOR = 22;
  /** RegularExpression Id. */
  int INT = 23;
  /** RegularExpression Id. */
  int CHARACTER = 24;
  /** RegularExpression Id. */
  int AVATAR = 25;
  /** RegularExpression Id. */
  int GROUP = 26;
  /** RegularExpression Id. */
  int RESPONSE = 27;
  /** RegularExpression Id. */
  int STRING = 28;
  /** RegularExpression Id. */
  int LIST = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int LOGICALAND = 31;
  /** RegularExpression Id. */
  int LOGICALOR = 32;
  /** RegularExpression Id. */
  int EQUALITY = 33;
  /** RegularExpression Id. */
  int INEQUALITY = 34;
  /** RegularExpression Id. */
  int IDENTIFIER = 35;
  /** RegularExpression Id. */
  int LETTER = 36;
  /** RegularExpression Id. */
  int DIGIT = 37;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int PREPROCESSOR_OUTPUT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"\\n\"",
    "\"\\\\\\n\"",
    "\"\\\\\\r\\n\"",
    "<token of kind 10>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "\"return\"",
    "\"while\"",
    "\"Float\"",
    "\"else\"",
    "\"for\"",
    "\"Integer\"",
    "\"Character\"",
    "\"Avatar\"",
    "\"Group\"",
    "\"Response\"",
    "\"String\"",
    "\"List\"",
    "\"if\"",
    "\"&&\"",
    "\"||\"",
    "\"==\"",
    "\"!=\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\"=\"",
    "\"[\"",
    "\"]\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\",\"",
  };

}
