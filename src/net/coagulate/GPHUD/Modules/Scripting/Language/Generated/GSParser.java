/* GSParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. GSParser.java */
package net.coagulate.GPHUD.Modules.Scripting.Language.Generated;

public class GSParser/*@bgen(jjtree)*/implements GSParserTreeConstants, GSParserConstants {/*@bgen(jjtree)*/
  protected JJTGSParserState jjtree = new JJTGSParserState();

/** Main production. */
  final public GSStart Start() throws ParseException {/*@bgen(jjtree) Start */
  GSStart jjtn000 = new GSStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Statements();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Statements() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:
      case INT:
      case CHARACTER:
      case AVATAR:
      case GROUP:
      case RESPONSE:
      case STRING:
      case LIST:
      case IF:
      case IDENTIFIER:
      case 38:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Statement();
    }
  }

  final public void Statement() throws ParseException {/*@bgen(jjtree) Statement */
  GSStatement jjtn000 = new GSStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 38:{
        jj_consume_token(38);
        Statements();
        jj_consume_token(39);
        break;
        }
      case IF:{
        Conditional();
        break;
        }
      case WHILE:{
        WhileLoop();
        break;
        }
      case INT:
      case CHARACTER:
      case AVATAR:
      case GROUP:
      case RESPONSE:
      case STRING:
      case LIST:{
        Initialiser();
        jj_consume_token(40);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        if (jj_2_1(2)) {
          Assignment();
          jj_consume_token(40);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Initialiser() throws ParseException {/*@bgen(jjtree) Initialiser */
  GSInitialiser jjtn000 = new GSInitialiser(JJTINITIALISER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      TypeSpecifier();
      Identifier();
      jj_consume_token(41);
      Expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */
  GSAssignment jjtn000 = new GSAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      IdentifierOrListElement();
      jj_consume_token(41);
      Expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void TypeSpecifier() throws ParseException {/*@bgen(jjtree) TypeSpecifier */
  GSTypeSpecifier jjtn000 = new GSTypeSpecifier(JJTTYPESPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      case RESPONSE:{
        jj_consume_token(RESPONSE);
        break;
        }
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case CHARACTER:{
        jj_consume_token(CHARACTER);
        break;
        }
      case AVATAR:{
        jj_consume_token(AVATAR);
        break;
        }
      case GROUP:{
        jj_consume_token(GROUP);
        break;
        }
      case LIST:{
        jj_consume_token(LIST);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void IdentifierOrListElement() throws ParseException {/*@bgen(jjtree) IdentifierOrList */
  GSIdentifierOrList jjtn000 = new GSIdentifierOrList(JJTIDENTIFIERORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_2(2)) {
        IdentifierWithIndex();
      } else if (jj_2_3(2)) {
        Identifier();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void IdentifierWithIndex() throws ParseException {/*@bgen(jjtree) IdentifierWithIndex */
  GSIdentifierWithIndex jjtn000 = new GSIdentifierWithIndex(JJTIDENTIFIERWITHINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      jj_consume_token(42);
      Expression();
      jj_consume_token(43);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Identifier() throws ParseException {/*@bgen(jjtree) Identifier */
  GSIdentifier jjtn000 = new GSIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Expression() throws ParseException {/*@bgen(jjtree) Expression */
  GSExpression jjtn000 = new GSExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LogicalOr();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void LogicalOr() throws ParseException {/*@bgen(jjtree) LogicalOr */
  GSLogicalOr jjtn000 = new GSLogicalOr(JJTLOGICALOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LogicalAnd();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LOGICALOR:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(LOGICALOR);
        LogicalAnd();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                       jjtree.clearNodeScope(jjtn000);
                                       jjtc000 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte000 instanceof RuntimeException) {
                                       {if (true) throw (RuntimeException)jjte000;}
                                     }
                                     if (jjte000 instanceof ParseException) {
                                       {if (true) throw (ParseException)jjte000;}
                                     }
                                     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtn000.jjtSetLastToken(getToken(0));
                                     }
    }
  }

  final public void LogicalAnd() throws ParseException {/*@bgen(jjtree) LogicalAnd */
  GSLogicalAnd jjtn000 = new GSLogicalAnd(JJTLOGICALAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      InEquality();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LOGICALAND:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        jj_consume_token(LOGICALAND);
        InEquality();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                         jjtree.clearNodeScope(jjtn000);
                                         jjtc000 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte000 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte000;}
                                       }
                                       if (jjte000 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte000;}
                                       }
                                       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtn000.jjtSetLastToken(getToken(0));
                                       }
    }
  }

  final public void InEquality() throws ParseException {/*@bgen(jjtree) InEquality */
  GSInEquality jjtn000 = new GSInEquality(JJTINEQUALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Equality();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INEQUALITY:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(INEQUALITY);
        Equality();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                        jjtree.clearNodeScope(jjtn000);
                                        jjtc000 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte000 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte000;}
                                      }
                                      if (jjte000 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte000;}
                                      }
                                      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtn000.jjtSetLastToken(getToken(0));
                                      }
    }
  }

  final public void Equality() throws ParseException {/*@bgen(jjtree) Equality */
  GSEquality jjtn000 = new GSEquality(JJTEQUALITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      GreaterThan();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUALITY:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        jj_consume_token(EQUALITY);
        GreaterThan();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte000;}
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte000;}
                                   }
                                   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtn000.jjtSetLastToken(getToken(0));
                                   }
    }
  }

  final public void GreaterThan() throws ParseException {/*@bgen(jjtree) GreaterThan */
  GSGreaterThan jjtn000 = new GSGreaterThan(JJTGREATERTHAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LessThan();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 44:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        jj_consume_token(44);
        LessThan();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte000;}
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte000;}
                                         }
                                         {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtn000.jjtSetLastToken(getToken(0));
                                         }
    }
  }

  final public void LessThan() throws ParseException {/*@bgen(jjtree) LessThan */
  GSLessThan jjtn000 = new GSLessThan(JJTLESSTHAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      GreaterOrEqualThan();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 45:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        jj_consume_token(45);
        GreaterOrEqualThan();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte000;}
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte000;}
                                   }
                                   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtn000.jjtSetLastToken(getToken(0));
                                   }
    }
  }

  final public void GreaterOrEqualThan() throws ParseException {/*@bgen(jjtree) GreaterOrEqualThan */
  GSGreaterOrEqualThan jjtn000 = new GSGreaterOrEqualThan(JJTGREATEROREQUALTHAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LessOrEqualThan();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 46:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_8;
        }
        jj_consume_token(46);
        LessOrEqualThan();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                                         jjtree.clearNodeScope(jjtn000);
                                                         jjtc000 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte000 instanceof RuntimeException) {
                                                         {if (true) throw (RuntimeException)jjte000;}
                                                       }
                                                       if (jjte000 instanceof ParseException) {
                                                         {if (true) throw (ParseException)jjte000;}
                                                       }
                                                       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
    }
  }

  final public void LessOrEqualThan() throws ParseException {/*@bgen(jjtree) LessOrEqualThan */
  GSLessOrEqualThan jjtn000 = new GSLessOrEqualThan(JJTLESSOREQUALTHAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Add();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 47:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_9;
        }
        jj_consume_token(47);
        Add();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   {if (true) throw (RuntimeException)jjte000;}
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   {if (true) throw (ParseException)jjte000;}
                                                 }
                                                 {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
    }
  }

  final public void Add() throws ParseException {/*@bgen(jjtree) Add */
  GSAdd jjtn000 = new GSAdd(JJTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Subtract();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 48:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_10;
        }
        jj_consume_token(48);
        Subtract();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                           jjtree.clearNodeScope(jjtn000);
                           jjtc000 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte000 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte000;}
                         }
                         if (jjte000 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte000;}
                         }
                         {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtn000.jjtSetLastToken(getToken(0));
                         }
    }
  }

  final public void Subtract() throws ParseException {/*@bgen(jjtree) Subtract */
  GSSubtract jjtn000 = new GSSubtract(JJTSUBTRACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Multiply();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 49:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_11;
        }
        jj_consume_token(49);
        Multiply();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte000;}
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte000;}
                                   }
                                   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtn000.jjtSetLastToken(getToken(0));
                                   }
    }
  }

  final public void Multiply() throws ParseException {/*@bgen(jjtree) Multiply */
  GSMultiply jjtn000 = new GSMultiply(JJTMULTIPLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Divide();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 50:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_12;
        }
        jj_consume_token(50);
        Divide();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte000;}
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte000;}
                                   }
                                   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtn000.jjtSetLastToken(getToken(0));
                                   }
    }
  }

  final public void Divide() throws ParseException {/*@bgen(jjtree) Divide */
  GSDivide jjtn000 = new GSDivide(JJTDIVIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      UnaryTerm();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 51:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_13;
        }
        jj_consume_token(51);
        UnaryTerm();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                                 jjtree.clearNodeScope(jjtn000);
                                 jjtc000 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte000 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte000;}
                               }
                               if (jjte000 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte000;}
                               }
                               {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtn000.jjtSetLastToken(getToken(0));
                               }
    }
  }

  final public void UnaryTerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 42:
    case 53:{
      Term();
      break;
      }
    case 52:{
      LogicalNot();
      break;
      }
    case 49:{
      UnaryMinus();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UnaryMinus() throws ParseException {/*@bgen(jjtree) UnaryMinus */
  GSUnaryMinus jjtn000 = new GSUnaryMinus(JJTUNARYMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(49);
      Term();
    } catch (Throwable jjte000) {
if (jjtc000) {
                                         jjtree.clearNodeScope(jjtn000);
                                         jjtc000 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte000 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte000;}
                                       }
                                       if (jjte000 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte000;}
                                       }
                                       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtn000.jjtSetLastToken(getToken(0));
                                       }
    }
  }

  final public void LogicalNot() throws ParseException {/*@bgen(jjtree) LogicalNot */
  GSLogicalNot jjtn000 = new GSLogicalNot(JJTLOGICALNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(52);
      Term();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Term() throws ParseException {/*@bgen(jjtree) Term */
  GSTerm jjtn000 = new GSTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:{
        StringConstant();
        break;
        }
      case INTEGER_LITERAL:{
        IntegerConstant();
        break;
        }
      case FLOATING_POINT_LITERAL:{
        FloatConstant();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_4(5)) {
          FunctionCall();
        } else if (jj_2_5(2)) {
          ListIndex();
        } else if (jj_2_6(2)) {
          Identifier();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 53:{
            jj_consume_token(53);
            Expression();
            jj_consume_token(54);
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            if (jj_2_7(5)) {
              InlineList();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ListIndex() throws ParseException {/*@bgen(jjtree) ListIndex */
  GSListIndex jjtn000 = new GSListIndex(JJTLISTINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      jj_consume_token(42);
      Expression();
      jj_consume_token(43);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void StringConstant() throws ParseException {/*@bgen(jjtree) StringConstant */
  GSStringConstant jjtn000 = new GSStringConstant(JJTSTRINGCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(STRING_LITERAL);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void IntegerConstant() throws ParseException {/*@bgen(jjtree) IntegerConstant */
  GSIntegerConstant jjtn000 = new GSIntegerConstant(JJTINTEGERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INTEGER_LITERAL);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void FloatConstant() throws ParseException {/*@bgen(jjtree) FloatConstant */
  GSFloatConstant jjtn000 = new GSFloatConstant(JJTFLOATCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FLOATING_POINT_LITERAL);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void FunctionCall() throws ParseException {/*@bgen(jjtree) FunctionCall */
  GSFunctionCall jjtn000 = new GSFunctionCall(JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      FunctionName();
      jj_consume_token(53);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 42:
      case 49:
      case 52:
      case 53:{
        Parameters();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(54);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void FunctionName() throws ParseException {/*@bgen(jjtree) FunctionName */
  GSFunctionName jjtn000 = new GSFunctionName(JJTFUNCTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Parameters() throws ParseException {/*@bgen(jjtree) Parameters */
  GSParameters jjtn000 = new GSParameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Parameter();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 55:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_14;
        }
        jj_consume_token(55);
        Parameter();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Parameter() throws ParseException {/*@bgen(jjtree) Parameter */
  GSParameter jjtn000 = new GSParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Conditional() throws ParseException {/*@bgen(jjtree) Conditional */
  GSConditional jjtn000 = new GSConditional(JJTCONDITIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      jj_consume_token(53);
      Expression();
      jj_consume_token(54);
      Statement();
      if (jj_2_8(2)) {
        jj_consume_token(ELSE);
        Statement();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void InlineList() throws ParseException {/*@bgen(jjtree) List */
  GSList jjtn000 = new GSList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 42:
      case 49:
      case 52:
      case 53:{
        Expression();
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 55:{
            ;
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            break label_15;
          }
          jj_consume_token(55);
          Expression();
        }
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(43);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void WhileLoop() throws ParseException {/*@bgen(jjtree) WhileLoop */
  GSWhileLoop jjtn000 = new GSWhileLoop(JJTWHILELOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WHILE);
      jj_consume_token(53);
      Expression();
      jj_consume_token(54);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(48)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_18()) return true;
    if (jj_scan_token(42)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(53)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(52)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(55)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(42)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_18()) return true;
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(55)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(46)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_23()) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(47)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(45)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_24()) return true;
    if (jj_scan_token(53)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(44)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3_1()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(38)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(49)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(51)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(50)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(49)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(LOGICALAND)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(EQUALITY)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(INEQUALITY)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(LOGICALOR)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GSParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7f880000,0x7f880000,0x3f800000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x28800,0x28800,0x0,0x28800,0x0,0x0,0x28800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x48,0x40,0x0,0x1,0x0,0x4,0x2,0x1000,0x2000,0x4000,0x8000,0x10000,0x20000,0x40000,0x80000,0x320408,0x0,0x200000,0x320408,0x800000,0x800000,0x320408,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public GSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GSParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public GSParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public GSParser(GSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
