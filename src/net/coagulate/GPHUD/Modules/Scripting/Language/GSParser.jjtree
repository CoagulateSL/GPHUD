options {
    STATIC=false;
    OUTPUT_DIRECTORY="Generated";
    MULTI=true;
    NODE_DEFAULT_VOID=true;
    NODE_PREFIX="GS";
    NODE_CLASS="net.coagulate.GPHUD.Modules.Scripting.Language.ParseNode";
    TRACK_TOKENS=true;
    //DEBUG_PARSER=true;
    //DEBUG_LOOKAHEAD=true;
    //DEBUG_TOKEN_MANAGER=true;
}
PARSER_BEGIN(GSParser)
package net.coagulate.GPHUD.Modules.Scripting.Language.Generated;

import java.util.*;

  public class GSParser{
  }

PARSER_END(GSParser)

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

<PREPROCESSOR_OUTPUT> SKIP:
{
     "\n" : DEFAULT
}

<PREPROCESSOR_OUTPUT> MORE:
{
 "\\\n"
 |
 "\\\r\n"
 |
 < ~[] >
}


TOKEN : {
 <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|  <STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
}

TOKEN : {
	<RETURN: "return"> |
	<WHILE: "while"> |
	<FLOAT: "float"> |
	<ELSE: "else"> |
	<FOR: "for"> |
	<INT: "Integer"> |
	<CHARACTER: "Character"> |
	<AVATAR: "Avatar"> |
	<GROUP: "Group"> |
	<RESPONSE: "Response"> |
	<STRING: "String"> |
	<LIST: "List"> |
	<IF: "if"> |
	<LOGICALAND: "&&"> |
	<LOGICALOR: "||"> |
	<EQUALITY: "=="> |
	<INEQUALITY: "!=" >
}

TOKEN : {
 <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|  <#LETTER: ["$","A"-"Z","_","a"-"z"]>
|  <#DIGIT: ["0"-"9"]>
}

/** Main production. */
GSStart Start() #Start : {}
{
  Statements() <EOF>
  { return jjtThis; }
}

void Statements() : {}
{
    ( Statement() )*
}

void Statement() #Statement : {}
{
    "{" Statements() "}" |
    Conditional() |
    WhileLoop() |
    Initialiser() ";" |
    LOOKAHEAD(2) Assignment() ";"
}

void Initialiser() #Initialiser : {}
{
    TypeSpecifier() Identifier() "=" Expression()
}

void Assignment() #Assignment : {}
{
    IdentifierOrListElement() "=" Expression()
}

void TypeSpecifier() #TypeSpecifier : {}
{
    <STRING> | <RESPONSE> | <INT> | <CHARACTER> | <AVATAR> | <GROUP> | "List"
}

void IdentifierOrListElement() #IdentifierOrList : {}
{
    LOOKAHEAD(2) IdentifierWithIndex() |
    LOOKAHEAD(2) Identifier()
}

void IdentifierWithIndex() #IdentifierWithIndex : {}
{
    Identifier() "[" Expression() "]"
}

void Identifier() #Identifier : {}
{
    <IDENTIFIER>
}

void Expression() #Expression : {}
{
    LogicalOr()
}

void LogicalOr() #LogicalOr : {} { LogicalAnd() ( <LOGICALOR> LogicalAnd() )* }
void LogicalAnd() #LogicalAnd : {} { InEquality() ( <LOGICALAND> InEquality() )* }
void InEquality() #InEquality: {} { Equality() ( <INEQUALITY> Equality() )* }
void Equality() #Equality : {} { GreaterThan() ( <EQUALITY> GreaterThan() )* }
void GreaterThan() #GreaterThan : {} { LessThan() ( ">" LessThan() )* }
void LessThan() #LessThan : {} { GreaterOrEqualThan() ( "<" GreaterOrEqualThan() )* }
void GreaterOrEqualThan() #GreaterOrEqualThan : {} { LessOrEqualThan() ( ">=" LessOrEqualThan() )* }
void LessOrEqualThan() #LessOrEqualThan : {} { Add() ( "<=" Add() )* }
void Add() #Add : {} { Subtract() ( "+" Subtract() )* }
void Subtract() #Subtract : {} { Multiply() ( "-" Multiply())* }
void Multiply() #Multiply : {} { Divide() ( "*" Divide())* }
void Divide() #Divide : {} { UnaryTerm() ( "/" UnaryTerm())* }

void UnaryTerm() : {} { Term() | LogicalNot() | UnaryMinus() }

void UnaryMinus() #UnaryMinus : {} { "-" Term() }

void LogicalNot() #LogicalNot: {}
{
  "!" Term()
}

void Term() #Term : {}
{
    StringConstant() |
    IntegerConstant() |
    FloatConstant() |
    LOOKAHEAD(5) FunctionCall() |
    LOOKAHEAD(2) ListIndex() |
    LOOKAHEAD(2) Identifier() |
    "(" Expression() ")" |
    LOOKAHEAD(5) InlineList()
}

void ListIndex() #ListIndex : {} {
    Identifier() "[" Expression() "]"
}

void StringConstant() #StringConstant : {}
{
    <STRING_LITERAL>
}

void IntegerConstant() #IntegerConstant : {}
{
    <INTEGER_LITERAL>
}

void FloatConstant() #FloatConstant : {}
{
    <FLOATING_POINT_LITERAL>
}

void FunctionCall() #FunctionCall : {} {
    FunctionName() "(" ( Parameters() )? ")"
}

void FunctionName() #FunctionName : {} {
    <IDENTIFIER>
}

void Parameters() #Parameters : {}
{
    Parameter() ( "," Parameter() )*
}

void Parameter() #Parameter : {}
{
    Expression()
}

void Conditional() #Conditional : {}
{
    <IF>
    "("
    Expression()
    ")"
    Statement()
    (
        LOOKAHEAD(2)
        <ELSE>
        Statement()
    )?
}

void InlineList() #List : {}
{
    "[" (Expression() (","Expression())*)? "]"
}

void WhileLoop() #WhileLoop : {}
{
    <WHILE> "(" Expression() ")" Statement()
}

